<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>mockapp-parent</artifactId>
        <groupId>org.vaadin.maven.mockapp</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>mockapp-server</artifactId>
    <name>Server Module for Development</name>
    <packaging>war</packaging>

    <dependencies>
        <!-- Vaadin Charts. Remember that this requires a license! -->
        <dependency>
            <groupId>com.vaadin.addon</groupId>
            <artifactId>vaadin-charts</artifactId>
            <version>1.1.2</version>
        </dependency>

        <!-- Custom components -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>mockapp-client</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Bean validation implementation -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>5.1.0.CR1</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

        <!-- Integration testing with Vaadin TestBench 4 -->
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-testbench</artifactId>
            <version>4.0-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <configuration>
                    <extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
                    <webappDirectory>${basedir}/target/classes/VAADIN/widgetsets</webappDirectory>
                    <draftCompile>true</draftCompile>
                    <compileReport>true</compileReport>
                    <style>OBF</style>
                    <strict>true</strict>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>update-widgetset</goal>
                            <goal>resources</goal>
                            <goal>compile</goal>
                            <!-- Even though the Vaadin sevlet will compile the theme to CSS during
                                development mode, we explicitly do it here as well to make it easier to assemble
                                the production build. Remember to exclude the generated styles.css file from
                                your version control system. -->
                            <goal>compile-theme</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <!-- By attaching the classes to a separate JAR, we can import them
                        directly in the production overlay project, making it easier to compile a
                        separate widgetset for production mode. -->
                    <attachClasses>true</attachClasses>
                    <!-- Exclude some unnecessary files generated by the GWT compiler. -->
                    <packagingExcludes>WEB-INF/classes/VAADIN/gwt-unitCache/**,
                        WEB-INF/classes/VAADIN/widgetsets/WEB-INF/**
                    </packagingExcludes>
                </configuration>
            </plugin>
            <!-- The Jetty plugin allows us to easily test the development build by
                running jetty:run on the command line. -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>

                <executions>
                    <!-- start and stop jetty when running integration tests -->
                    <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run-exploded</goal>
                        </goals>
                        <configuration>
                            <scanIntervalSeconds>0</scanIntervalSeconds>
                            <daemon>true</daemon>
                            <stopKey>STOP</stopKey>
                            <stopPort>8866</stopPort>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <stopPort>8866</stopPort>
                            <stopKey>STOP</stopKey>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.16</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>


    </build>
    <!--  Alternative way to run superdevmode code server. The client-side code changes are picked up directly from the
    client-module source folder instead of the local maven repository. Run with mvn -Pdev exec:java . -->
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <property>
                    <name>dev</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.3</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                            </execution>
                        </executions>

                        <configuration>
                            <mainClass>com.google.gwt.dev.codeserver.CodeServer</mainClass>
                            <arguments>
                                <argument>-src</argument>
                                <argument>${basedir}/../mockapp-client/src/main/java</argument>
                                <argument>-src</argument>
                                <argument>${basedir}/../mockapp-client/src/main/resources</argument>
                                <argument>org.vaadin.mockapp.widgetset.MockAppWidgetset</argument>
                            </arguments>
                            <classpathScope>compile</classpathScope>
                        </configuration>

                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>